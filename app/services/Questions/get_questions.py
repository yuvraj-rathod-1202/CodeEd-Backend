from abc import ABC, abstractmethod
from app.models.GEMINI.Questions import GetQuestions as GetQUestionsFromModel
from app.models.BaseModel.common import Question
from typing import List, Tuple, Optional

class GetQuestions(ABC):
    @abstractmethod
    def get_questions(self, text: str, number: int, difficulty: str, quiz_type: str, userId: Optional[str] = None) -> Tuple[List[Question], str]:
        """
        Abstract method to get questions from the provided text.
        
        :param text: The input text from which to generate questions.
        :param userId: Optional user ID for personalization
        :return: A list of question objects.
        """
        pass


class GetQuestionsFromGEMINI(GetQuestions):
    def get_questions(self, text: str, number: int, difficulty: str, quiz_type: str, userId: Optional[str] = None) -> Tuple[List[Question], str]:
        """
        Implementation of the abstract method to get questions from the provided text using ChatGPT.
        
        :param text: The input text from which to generate questions.
        :param userId: Optional user ID for personalization
        :return: A list of question objects generated by ChatGPT.
        """
        return GetQUestionsFromModel().get_questions(text=text, numbers=number, difficulty=difficulty, quiz_type=quiz_type, userId=userId)
    

class GetQuestionsModel():
    def __init__(self, model: GetQuestions = GetQuestionsFromGEMINI()):
        self.model = model

    def execute_model(self, text: str, number: int, difficulty: str, quiz_type: str, userId: Optional[str] = None) -> Tuple[List[Question], str]:
        """
        Get questions from the provided text using the specified model.
        
        :param text: The input text from which to generate questions.
        :param number: The number of questions to generate.
        :param userId: Optional user ID for personalization
        :return: A list of question objects.
        """
        return self.model.get_questions(text, number, difficulty, quiz_type, userId)